---
title: "Djamaldbz - DJAMAL TOE"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, message = FALSE, warning = FALSE)
```


```{r, echo = FALSE}
capTabNo = 1; capFigNo = 1;
capTab = function(x){
 
    x = paste0("Tableau ",capTabNo," : ",x)
    capTabNo <<- capTabNo + 1
 x
}

capFig = function(x){
 
    x = paste0("Figure ",capFigNo," : ",x)
    capFigNo <<- capFigNo + 1
    x
}

repeated_capFig = function(x){
  x = paste0(paste0(paste0("Figure ", capFigNo), ""), x)
  x
}
options(OutDec= ",")
```

```{r}
packages <- c("ggplot2","haven", "gtsummary", "corrr", "MASS",
              "dplyr","haven", "rstatix", "tidyverse", "ggpubr",
              "glue", "dplyr","ggspatial", "ggrepel","marmap", 
              "readxl", "stringr", "colorspace", "sf", "viridis",
              "tools","ggspatial","readxl","openxlsx","grid",
              "outliers","car","ftExtra","tibble",
              "gtsummary", "wesanderson", "viridis",
              "RColorBrewer", "knitr", "kableExtra") 
            
for (pkg in packages) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg, dependencies = T)
  }
  library(pkg, character.only = TRUE)
}
```


```{r, echo=FALSE}
# Créer un tableau avec les régions du Burkina Faso
regions <- c("Boucle du Mouhoun", "Cascades", "Centre", 
             "Centre-Est", "Centre-Nord", "Centre-Ouest", "Centre-Sud",
             "Est", "Hauts-Bassins", "Nord", "Plateau-Central", 
             "Sahel", "Sud-Ouest")

##- Générer des données fictives pour chaque région
data <- data.frame(
  Region = regions,
  Population = sample(300000:2500000, 13, replace = TRUE), ##-- Population aléatoire entre 300,000 et 2,500,000
 Taux_Mortalite = round(runif(13, 5, 15), 2),  ##- Taux de mortalité entre 5 et 15 pour 1000 habitants
 Couverture_Sanitaire = round(runif(13, 60, 95), 2),  ##- Couverture sanitaire entre 60% et 95%
 Acces_Eau_Potable = round(runif(13, 50, 90), 2)  ##-- Accès à l'eau potable entre 50% et 90%
)
```



## Comment faire des cartes Choroplèthes et des cartes de proportions avec R ?

|       Les cartes choroplèthes et les cartes de proportions sont des outils puissants pour visualiser des données géospatiales dans R. Ces cartes permettent de représenter des valeurs quantitatives (par exemple, des taux de population, des moyennes) sur des zones géographiques, souvent des régions administratives comme des départements, des communes, ou des zones géographiques personnalisées.

> Introduction aux Cartes Choroplèthes et Cartes de Proportions

Les cartes choroplèthes colorient les régions géographiques en fonction de valeurs numériques ou de proportions, facilitant l'analyse spatiale et la compréhension des variations géographiques. Elles sont couramment utilisées pour des données socio-économiques, de santé publique, ou des analyses environnementales.

Les cartes de proportions sont similaires mais mettent davantage l'accent sur les ratios ou proportions par rapport à une valeur totale, comme des pourcentages ou des fractions de populations.

> Notions de Base : Polygones, Shapefiles et Coordonnées
Avant de créer ces cartes, il est important de comprendre quelques notions de base, comme les polygones et les shapefiles :


::: {#polygon .callout-tip}
# Polygones

Une zone géographique est souvent représentée par un polygone, une forme géométrique fermée qui peut avoir plusieurs côtés. Par exemple, une commune ou un département sur une carte peut être représentée comme un polygone.

:::

::: {#Shapefiles .callout-tip}
# Shapefiles

Ce sont un format de fichier standard pour stocker des informations géospatiales, y compris les coordonnées de points, de lignes et de polygones. Ils peuvent contenir les géométries des entités géographiques ainsi que leurs attributs (valeurs associées à chaque région, comme le revenu moyen ou le taux de chômage).

:::

::: {#Shapefiles .callout-tip}
# Coordonnées géographiques

Les coordonnées (latitude et longitude) permettent de positionner ces polygones sur une carte. En R, on utilise des systèmes de coordonnées géographiques et projetées pour gérer et visualiser ces données.

:::

Plusieurs pakages permettent de visualiser les données avec les cartes, ici nous interessons aux packages ***glue*** et ***sf***.

> Zone d'étude

Supposons que nous menions une étude au Burkina-Faso. Par exemple, nous mésurer des indicateurs tels que le taux de mortalité, la couverture sanitaire etc ... Le Burkina Faso est un pays qui compte 13 regions, mais notre etude s'étend seulement sur 8 regions. Il convient de montrer toutes les regions, puis de mettre en exègue celles qui nous concernent. 

> Place au code

<details>
  <summary>voir/cacher le code</summary>
```{r}
###---- Chargement des shapefiles src = GADM
root <- getwd() ##-- la racine du repertoire

##- La carte du pays sans les polygones des regions, communes et/ou departements
path0 <- paste0(root,"/DATA_SIG/BFA2/gadm41_BFA_0.shp")

##- La carte du pays avec le polygone des regions, sans ceux des communes et/ou departements
path1 <- paste0(root,"/DATA_SIG/BFA2/gadm41_BFA_1.shp")

##- La carte du pays avec le polygone des regions, sans ceux des communes et/ou departements
path2 <- paste0("/DATA_SIG/BFA2/gadm41_BFA_2.shp")

##- La carte du pays avec le polygone des regions, sans ceux des communes et/ou departements
path3 <- paste0(root,"/DATA_SIG/BFA2/gadm41_BFA_3.shp")


##-- selection des regions concernées

study.area <-  c("Boucle du Mouhoun", "Centre-Est", "Centre-Nord",
             "Centre-Ouest", "Nord", "Sud-Ouest",
             "Haut-Bassins", "Cascades")

##-- lecture des shapefiles
pays_shp <- read_sf(glue(path0), quiet = T)
region_shp <- read_sf(glue(path1), quiet = T)
#commune_shp <- read_sf(glue(path2), quiet = T)
#province_shp <- read_sf(glue(path3), quiet = T)

##-- création d'une sous base avec les polygones des regions sélectionnés

data_region <- region_shp %>% filter(NAME_1 %in% study.area)


##-- Study area colors
study_zone_colors <- c("#1f77b4", "#ff7f0e", "#2ca02c",
                       "#3FE1B8", "#9467bd", "#8c564b",
                       "#00008B", "#4B0082")

study_zone_map <- ggplot() +
  geom_sf(data = pays_shp, aes(linewidth = "Burkina Faso"),fill = "white", color = "black") +
  geom_sf(data = region_shp, aes(fill = ifelse(
    NAME_1 %in% study.area,
    "Regions d'études",
    "Autres regions"
  ) )) +
  geom_sf_text(data = region_shp, aes(label = ifelse(
    NAME_1 %in% study.area,
    study.area,
    ""
  )), size = 4)+
  ggspatial::annotation_scale(
    location = "br",
    bar_cols = c("black", "white")
  )  +
  theme_light()+
  ggspatial::annotation_north_arrow(
    location = "tr", which_north = "true",
    pad_x = unit(0.05, "in"), pad_y = unit(0.05, "in"),
    style = ggspatial::north_arrow_nautical(
      fill = c("black", "white"),
      line_col = "black"
    )
  )+
  xlab("")+
  ylab("")+
  scale_linewidth_manual(values = c(1.2), name = "")+
  scale_fill_manual(values = c("white","#1f77b4"), name="Zone d'étude")+
  theme_light() + 
  guides(
    linewidth = guide_legend(order = 1),
    fill = guide_legend(order = 2),
    color = guide_legend(order = 3)
  )
```
</details>

```{r,fig.align='center', fig.width = 12, fig.height = 7}
#| fig-cap: Cartographie de la zone d'étude
study_zone_map
```

> Expliquons le code à présent

* Charger les fichier shapefiles :
  - ***glue*** : pour preparer la structure du format (optionnel)
  - ***readsf*** : pour lire les fichiers shapefiles

* Definir la zone d'étude : les fichier shapefile devient comme un dataframe, donc est manipulable au même titre que les fichiers excel, csv etc ...

* On trace d'abord la carte du pays, ensuite on ajoute la couche des regions (c'est-à-dire le shapefile des regions). On pourrait le faire simplement avec le shapefile des regions sans celui du pays.

* Ensuite on ajoute la couleur pour la zone concernée et les noms des regions sélectionnées avec `geom_sf_text`

* `annotation_scale` permet d'ajouter une barre d'échelle (scale bar) à une carte avec la position ***br*** pour dire bottom rigth (en bas à droite)

* `annotation_north_arrow` est utilisée pour ajouter une flèche du nord sur une carte créée avec ggplot2

* Pour le reste il s'agit des fonctions qu'on utilise couramment avec ggplot2

<details>
  <summary>Afficher/Masquer le tableau</summary>
```{r, echo=FALSE}
kbl(head(region_shp,10), caption = capTab("Les 10 premières lignes du shapefile")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% add_footnote(label = "Source des données :  GADM")
```
</details>


> Cartes choroplèthes

|       Les cartes choroplèthes sont des représentations graphiques qui utilisent des nuances de couleurs pour illustrer des données quantitatives ou qualitatives sur des zones géographiques. Chaque zone est remplie d'une couleur qui correspond à une valeur spécifique ou à une plage de valeurs, facilitant ainsi l'analyse des variations spatiales des données.

Les cartes choroplèthes sont idéales pour représenter des indicateurs comme le taux de mortalité, le revenu moyen, l'accès à l'eau potable, ou encore la couverture sanitaire par région.

### Exemple de carte choroplèthe

Dans cet exemple, nous allons créer une carte choroplèthe montrant la **couverture sanitaire** par région au Burkina Faso, en utilisant les données fictives créées plus haut. pour les données, [vous pouvez me contacter par email](mailto:djamaltoe2905@gmail.com).

- **Etape 1 :** ***Charger les shapefiles et les données***

Ici nous nous assurons que les shapefiles des régions et les données sont correctement chargés et liés entre eux. Pour cela on fait une jointure externe.

```{r}
##-- Joindre les données au shapefile
region_data <- region_shp %>% 
  left_join(data, by = c("NAME_1" = "Region"))
```

Avant de passer à l'étape 2, affichons les données générées avant jointure et ceux aprés jointures.

<details>
  <summary>Afficher/cacher le code</summary>

```{r}
tbl.avant.jointure <- kbl(head(data,10)) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))

tbl.apres.jointure <- kbl(head(data,10)) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>% add_footnote(label = "Source des données :  GADM")
```
</details>

<details>
  <summary>Afficher/Masquer le tableau</summary>
```{r}
#| label: tables_jointures
#| tbl-cap : "Les 10 premières lignes des tables"
#| tbl-subcap: 
#|   - "Avant jointure"
#|   - "Après jointure"
#| layout-ncol: 2

tbl.avant.jointure

tbl.apres.jointure
```
  
</details> 

- **Etape 2 :** ***Créer la carte choroplèthe***

Utilisez `ggplot2` et `geom_sf()` pour afficher les régions et les colorer en fonction de la couverture sanitaire.

```{r}
#| fig-cap: "Couverture sanitaire par région"
#| fig-align: "center"
##-  Carte choroplèthe
choropleth_map <- ggplot(region_data) +
  geom_sf(aes(fill = Couverture_Sanitaire), color = "black") +
  scale_fill_viridis_c(
    option = "C",
    name = "Couverture Sanitaire (%)"
  ) +
  ggtitle("Carte choroplèthe : Couverture sanitaire par région") +
  theme_minimal() +
  theme(
    legend.position = "right",
    plot.title = element_text(hjust = 0.5, face = "bold")
  )

choropleth_map
```

- **Etape 3 : ** ***Ajouter des éléments décoratifs***

Ajoutons une barre d'échelle et une flèche du nord pour rendre la carte plus informative.

```{r}
##- Ajout des éléments décoratifs
choropleth_map <- choropleth_map +
  ggspatial::annotation_scale(location = "br") +
  ggspatial::annotation_north_arrow(
    location = "tl", style = north_arrow_nautical()
  ) ###-- tl pour top-left (en haut à gauche)

choropleth_map
```


>  Interpréter les résultats

Examinez la carte générée et répondez aux questions suivantes :
- Quelles régions ont la meilleure couverture sanitaire ?
- Quelles régions doivent faire l'objet d'une attention particulière pour améliorer les conditions de vie ?




#### Extensions possibles

- Réalisez une carte choroplèthe pour le taux de mortalité.
- Ajoutez des annotations pour les régions ayant les valeurs extrêmes.
- Expérimentez avec d'autres palettes de couleurs en utilisant `scale_fill_brewer()` ou `scale_fill_manual()` etc ....

::: {#Shapefiles .callout-important}
# Données discrètes ?

Il se peut qu'il n'y ait pas une variabilité importante dans les données dans ce cas, au lieu d'avoir une palette, nous aurons juste des cases de couleurs comme s'agissait d'un indicateur discrèt. Dans ce cas, recoder juste cet indicateur en un indicateur qualitatif (regrouper par classe) et ensuite utiliser `scale_fill_manual()` pour definir vos couleurs manuellement ou laisser R le faire tout seul. Le graphique ci-dessous en est un exemple.

:::

![Exemple de carte avec un indicateur recodé : Indisponible pour l'instant]


> Cartes de proportions

>>> **A suivre**

> Cartes de proportions avancées

```{r, echo=F}
# Création des variables pour chaque région avec des habitudes alimentaires spécifiques

# Assignation des proportions pour chaque aliment
region_data$Riz <- case_when(
  region_data$NAME_1 == "Haut-Bassins" ~ 34,
  region_data$NAME_1 == "Centre" ~ 40,
  region_data$NAME_1 == "Centre-Est" ~ 25,
  region_data$NAME_1 == "Centre-Nord" ~ 20,
  region_data$NAME_1 == "Centre-Ouest" ~ 10,
  region_data$NAME_1 == "Centre-Sud" ~ 15,
  region_data$NAME_1 == "Est" ~ 30,
  region_data$NAME_1 == "Boucle du Mouhoun" ~ 28,
  region_data$NAME_1 == "Cascades" ~ 22,
  region_data$NAME_1 == "Nord" ~ 0,
  region_data$NAME_1 == "Plateau-Central" ~ 5,
  region_data$NAME_1 == "Sahel" ~ 22,
  region_data$NAME_1 == "Sud-Ouest" ~ 18,
  TRUE ~ 0  # Valeur par défaut pour les autres régions
)

region_data$Soumbala <- case_when(
  region_data$NAME_1 == "Haut-Bassins" ~ 27,
  region_data$NAME_1 == "Centre" ~ 15,
  region_data$NAME_1 == "Centre-Est" ~ 18,
  region_data$NAME_1 == "Centre-Nord" ~ 22,
  region_data$NAME_1 == "Centre-Ouest" ~ 30,
  region_data$NAME_1 == "Centre-Sud" ~ 10,
  region_data$NAME_1 == "Est" ~ 20,
  region_data$NAME_1 == "Boucle du Mouhoun" ~ 19,
  region_data$NAME_1 == "Cascades" ~ 25,
  region_data$NAME_1 == "Nord" ~ 0,
  region_data$NAME_1 == "Plateau-Central" ~ 10,
  region_data$NAME_1 == "Sahel" ~ 0,
  region_data$NAME_1 == "Sud-Ouest" ~ 15,
  TRUE ~ 0
)

region_data$To <- case_when(
  region_data$NAME_1 == "Haut-Bassins" ~ 13,
  region_data$NAME_1 == "Centre" ~ 10,
  region_data$NAME_1 == "Centre-Est" ~ 8,
  region_data$NAME_1 == "Centre-Nord" ~ 10,
  region_data$NAME_1 == "Centre-Ouest" ~ 15,
  region_data$NAME_1 == "Centre-Sud" ~ 5,
  region_data$NAME_1 == "Est" ~ 7,
  region_data$NAME_1 == "Boucle du Mouhoun" ~ 12,
  region_data$NAME_1 == "Cascades" ~ 6,
  region_data$NAME_1 == "Nord" ~ 0,
  region_data$NAME_1 == "Plateau-Central" ~ 3,
  region_data$NAME_1 == "Sahel" ~ 17,
  region_data$NAME_1 == "Sud-Ouest" ~ 5,
  TRUE ~ 0
)

region_data$Mil <- case_when(
  region_data$NAME_1 == "Haut-Bassins" ~ 5,
  region_data$NAME_1 == "Centre" ~ 7,
  region_data$NAME_1 == "Centre-Est" ~ 5,
  region_data$NAME_1 == "Centre-Nord" ~ 8,
  region_data$NAME_1 == "Centre-Ouest" ~ 4,
  region_data$NAME_1 == "Centre-Sud" ~ 3,
  region_data$NAME_1 == "Est" ~ 6,
  region_data$NAME_1 == "Boucle du Mouhoun" ~ 4,
  region_data$NAME_1 == "Cascades" ~ 3,
  region_data$NAME_1 == "Nord" ~ 0,
  region_data$NAME_1 == "Plateau-Central" ~ 2,
  region_data$NAME_1 == "Sahel" ~ 20,
  region_data$NAME_1 == "Sud-Ouest" ~ 4,
  TRUE ~ 0
)

region_data$Bissap <- case_when(
  region_data$NAME_1 == "Haut-Bassins" ~ 6,
  region_data$NAME_1 == "Centre" ~ 8,
  region_data$NAME_1 == "Centre-Est" ~ 10,
  region_data$NAME_1 == "Centre-Nord" ~ 5,
  region_data$NAME_1 == "Centre-Ouest" ~ 7,
  region_data$NAME_1 == "Centre-Sud" ~ 2,
  region_data$NAME_1 == "Est" ~ 10,
  region_data$NAME_1 == "Boucle du Mouhoun" ~ 8,
  region_data$NAME_1 == "Cascades" ~ 6,
  region_data$NAME_1 == "Nord" ~ 0,
  region_data$NAME_1 == "Plateau-Central" ~ 1,
  region_data$NAME_1 == "Sahel" ~ 0,
  region_data$NAME_1 == "Sud-Ouest" ~ 8,
  TRUE ~ 0
)

region_data <- region_data %>%
  mutate(across(c(Riz, Soumbala, To, Mil, Bissap), as.numeric),
         total =Riz + Soumbala + To + Mil + Bissap)
```



```{r, echo=FALSE}
##- Region
library(scatterpie)
region_centers <- st_centroid(region_data)

map_ <- ggplot() +
  geom_sf(data = region_data, fill="white") +
  geom_sf_text(data = region_data, aes(label = NAME_1), color = "black", size = 3) +
  ggspatial::annotation_scale(
    location = "br",
    bar_cols = c("black", "white")
  ) +
  theme_light() +
  ggspatial::annotation_north_arrow(
    location = "tr", which_north = "true",
    pad_x = unit(0.05, "in"), pad_y = unit(0.05, "in"),
    style = ggspatial::north_arrow_nautical(
      fill = c("black", "white"),
      line_col = "black"
    )
  ) +
  theme_minimal() +
  labs(
    caption = "Auteur : Djamal Y. TOE",
    fill = "Hab Alim",
  ) +
  xlab("")+
  ylab("")+
  theme(
    legend.text = element_text(size = 10) ,
    legend.position = "bottom",
    
  )

coordinates <- st_coordinates(region_centers)
region_centers$lon <- coordinates[, 1]
region_centers$lat <- coordinates[, 2]
```

```{r,echo = FALSE}
n_data <- as.data.frame(region_centers[c("Population","Riz", "Soumbala", "To", "Mil", "Bissap","total","lon","lat")])

n_data <- n_data[,-ncol(n_data)]
n_data_sf <- st_as_sf(n_data, coords = c("lon", "lat"), crs = 4326)
```


```{r, echo = FALSE}

#| fig-cap: "Repartions des regions par habitudes alimentaires"
#| fig-align: "center"
#| fig-height: 7
#| fig-width: 12

##- Convertir l'objet sf en dataframe sans la colonne geometry
n_data_no_geom <- st_drop_geometry(n_data_sf)

##- Calculer le total des habitudes alimentaires
n_data_no_geom$total <- rowSums(n_data_no_geom[, c("Riz", "Soumbala", "To", "Mil", "Bissap")], na.rm = TRUE)

##- Ajouter les coordonnées géographiques au dataframe (lon, lat)
n_data_no_geom$lon <- st_coordinates(n_data_sf)[, 1]  # Longitude
n_data_no_geom$lat <- st_coordinates(n_data_sf)[, 2]  # Latitude

##- Convertir à nouveau en sf (si nécessaire)
n_data_sf <- st_as_sf(n_data_no_geom, coords = c("lon", "lat"), crs = 4326)

##- Créer la carte avec les diagrammes circulaires
m <- map_ + 
  geom_scatterpie(data = n_data_no_geom, 
                  aes(x = lon, y = lat, r = 0.000000235 * Population), 
                  alpha = 0.9, 
                  cols = c("Riz", "Soumbala", "To", "Mil", "Bissap"), color = NA) + 
  coord_sf()  # Utilisation de coord_sf() pour un objet sf

##- Afficher la carte
print(m)

```




[Retour à la page d'accueuil](https://djamal2905.github.io/djamaldbz/)


