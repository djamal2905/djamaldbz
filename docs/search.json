[
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "",
    "text": "::: {#Comment cela fonctionne .callout-important} Je tiens tout d‚Äôabord √† rapperler que je n‚Äôutilise pas de mod√®le NLP pour cr√©er ce petit assistant virtuel. J‚Äôavais √©cris ce progamme en 2021, donc bien evidemment les outils utilis√©s ont √©volu√© et donc vous pourrez l‚Äôajuster √† votre guise. Le code source sera t√©l√©chargeable √† la fin de la page. :::"
  },
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html#wolfram-alpha-cest-quoi-et-√†-quoi-√ßa-sert",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html#wolfram-alpha-cest-quoi-et-√†-quoi-√ßa-sert",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "Wolfram Alpha : C‚Äôest quoi et √† quoi √ßa sert ?",
    "text": "Wolfram Alpha : C‚Äôest quoi et √† quoi √ßa sert ?\nWolfram Alpha est un moteur de calcul et de r√©ponse bas√© sur l‚Äôintelligence artificielle et les algorithmes symboliques. Contrairement √† un moteur de recherche classique comme Google, qui fournit des liens vers des sites web, Wolfram Alpha g√©n√®re directement des r√©ponses pr√©cises bas√©es sur des bases de connaissances et des algorithmes math√©matiques avanc√©s. Il est souvent utilis√© pour des calculs, des questions scientifiques et des recherches bas√©es sur des donn√©es structur√©es.\n\nUtilit√© :\n\nR√©solution d‚Äô√©quations math√©matiques et scientifiques\n\nRecherche et analyse de donn√©es (statistiques, physique, chimie, finance, etc.)\n\nInterpr√©tation de requ√™tes en langage naturel\n\nG√©n√©ration de graphiques et de simulations\n\nüîó Cr√©er un compte Wolfram Alpha :\nSi vous souhaitez utiliser l‚ÄôAPI de Wolfram Alpha dans votre projet, vous devez cr√©er un compte via ce lien :\nüëâ Cr√©er un compte Wolfram Alpha Je posterai une demo sur comment creer son compte et recup√©rer un id pour une application. Car en effet, il existe plusieurs type d‚ÄôID qui servent √† diff√©rentes type d‚Äôapplications. Il fonctionne en Anglais donc nous allons √©crire une fonction pour la traduction du Francais en Anglais afin de poser des questions et une pour la traduction de l‚ÄôAnglais en Fran√ßais pour la reponse trouv√©e. Vous avez bien entendu besoin de connexion pour effectuer les recherches.\nExemple d‚Äôutilisation\n\nans1 = client.query(queries[0])\nans1 = next(ans1.results).text\nans1\n\n'Emmanuel Macron (from 14/05/2017 to present)'\n\n\n\nans2 = client.query(queries[1])\nans2 = next(ans2.results).text\nans2\n\n'4 log(2)'\n\n\n\nans3 = client.query(queries[2])\nans3 = next(ans3.results).text\nans3\n\n'd/dx(x log(x)) = log(x) + 1'\n\n\n\nans4 = client.query(queries[3])\nans4 = next(ans4.results).text\nans4\n\n'integral_2^4 exp(2 x) dx = 1/2 e^4 (e^4 - 1)‚âà1463.2'\n\n\n\n\nExplication des parties techniques de votre code\nLe script commence par l‚Äôimportation des biblioth√®ques n√©cessaires :\n\nimport datetime\nimport webbrowser\nimport sys\nimport pywhatkit\nimport speech_recognition as sr\nimport pyttsx3 as ttx\nimport wikipedia\nfrom googletrans import Translator\nimport wolframalpha\n\n\ndatetime : gestion des dates et heures.\nwebbrowser : ouverture des pages web.\nsys : gestion des fonctionnalit√©s syst√®me.\npywhatkit : ex√©cution de commandes interactives comme la recherche YouTube.\nspeech_recognition : reconnaissance vocale.\npyttsx3 : synth√®se vocale.\nwikipedia : r√©cup√©ration d‚Äôinformations depuis Wikip√©dia.\ngoogletrans : traduction de texte.\nwolframalpha : moteur de r√©ponse √† des questions scientifiques et math√©matiques.\n\nIntaller les avec la commande :\n\nmodules = [\n    \"pywhatkit\", \"speechrecognition\", \"pyttsx3\",\n    \"wikipedia\", \"googletrans==4.0.0-rc1\", \"wolframalpha\", \"pyaudio\"\n]\n\nimport subprocess\nimport sys\ndef install_modules():\n    for module in modules:\n        try:\n            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", module])\n        except:\n            print(\"Quelque chose s'est mal pass√©e\")\n            \ninstall_modules()"
  },
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html#configuration-du-moteur-de-synth√®se-vocale",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html#configuration-du-moteur-de-synth√®se-vocale",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "2. Configuration du moteur de synth√®se vocale",
    "text": "2. Configuration du moteur de synth√®se vocale\nLe code initialise pyttsx3 et affiche les voix disponibles :\n\nmoteur = ttx.init()\nvoix_disponibles = moteur.getProperty(\"voices\")\n\nfor index, voix in enumerate(voix_disponibles):\n    print(f\"Index {index} - ID: {voix.id} - Langue: {voix.languages} - Nom: {voix.name}\")\n\nIndex 0 - ID: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_EN-US_DAVID_11.0 - Langue: [] - Nom: Microsoft David Desktop - English (United States)\nIndex 1 - ID: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_EN-US_ZIRA_11.0 - Langue: [] - Nom: Microsoft Zira Desktop - English (United States)\nIndex 2 - ID: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens\\TTS_MS_FR-FR_HORTENSE_11.0 - Langue: [] - Nom: Microsoft Hortense Desktop - French\n\n\nEnsuite, une voix sp√©cifique est s√©lectionn√©e et test√©e :\n\nmoteur.setProperty(\"voice\", voix_disponibles[2].id)\nmoteur.say(\"Bonjour, ceci est un test avec une autre voix.\")\nmoteur.runAndWait()"
  },
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html#d√©finition-de-la-classe-voxaassistant",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html#d√©finition-de-la-classe-voxaassistant",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "3. D√©finition de la classe voxaAssistant",
    "text": "3. D√©finition de la classe voxaAssistant\nLa classe voxaAssistant g√®re toutes les fonctionnalit√©s de l‚Äôassistant vocal.\n\n3.1 Initialisation\n\nclass voxaAssistant:\n    def __init__(self):\n        self.ecouteur = sr.Recognizer()\n        self.moteur = ttx.init()\n        self.voix_disponibles = self.moteur.getProperty(\"voices\")\n        self.moteur.setProperty(\"voice\", self.voix_disponibles[2].id)\n        self.moteur.setProperty(\"rate\", 170)\n        self.app_id = r.id_\n        self.client = wolframalpha.Client(self.app_id)\n\nCette m√©thode : - Initialise le moteur de reconnaissance vocale (speech_recognition). - Configure la synth√®se vocale avec pyttsx3. - D√©finit la cl√© API pour Wolfram Alpha.\n\n\n3.2 Fonction parler\nCette fonction g√©n√®re une sortie vocale √† partir d‚Äôun texte donn√©.\n\ndef parler(self, texte):\n    self.moteur.say(texte)\n    self.moteur.runAndWait()\n\n\n\n3.3 Fonction saluer\nCette fonction ajuste le message de salutation en fonction de l‚Äôheure.\n\ndef saluer(self):\n    heure_actuel = int(datetime.datetime.now().hour)\n    if 0 &lt;= heure_actuel &lt;= 12:\n        self.parler(\"Bonjour √† vous Djamal\")\n    else:\n        self.parler(\"Bonsoir √† vous Djamal\")"
  },
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html#reconnaissance-et-traitement-des-requ√™tes-vocales",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html#reconnaissance-et-traitement-des-requ√™tes-vocales",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "4. Reconnaissance et Traitement des Requ√™tes Vocales",
    "text": "4. Reconnaissance et Traitement des Requ√™tes Vocales\n\nFonction voxa_requete\nCette fonction √©coute l‚Äôutilisateur et transcrit la parole en texte.\n\ndef voxa_requete(self):\n    with sr.Microphone() as parole:\n        print(\"Entrain d'√©couter ...\")\n        self.ecouteur.adjust_for_ambient_noise(parole, duration=1)\n        self.ecouteur.pause_threshold = 1.5\n        try:\n            voix = self.ecouteur.listen(parole, timeout=5, phrase_time_limit=5)\n            command = self.ecouteur.recognize_google(voix, language=\"fr\").lower()\n            print(\"Vous avez dit .... : \", command)\n            return command\n        except sr.UnknownValueError:\n            print(\"Je n'ai pas compris, veuillez r√©p√©ter.\")\n            return \"\"\n        except sr.RequestError:\n            print(\"Erreur avec le service de reconnaissance vocale.\")\n            return \"\"\n\n\n\nRecherche Google et YouTube\nSi l‚Äôutilisateur mentionne Google ou YouTube, la recherche est effectu√©e automatiquement.\n\nelif \"google\" in voix:\n    url = voix.split().index(\"google\")\n    elt_rechercher = voix.split()[url + 1:]\n    self.parler(\"D'accord, je lance la recherche\")\n    webbrowser.open(\"https://www.google.com/search?q=\" + \"+\".join(elt_rechercher), new=2)\n\n\nelif \"recherche sur youtube\" in voix or \"recherche sur youtube.com\" in voix:\n                url = voix.split().index(\"youtube\")\n                elt_rechercher = voix.split()[url + 1:]\n                self.parler(\"d'accord  je  lance  la  recherche\")\n                webbrowser.open(\n                    \"http://www.youtube.com/results?search_query=\"\n                    + \"+\".join(elt_rechercher),\n                    new=2,\n                )\n\n\n1Ô∏è‚É£ split() : Pourquoi l‚Äôutiliser ici ?\n\nurl = voix.split().index(\"google\")\nelt_rechercher = voix.split()[url + 1:]\n\n\nsplit() d√©coupe une cha√Æne de caract√®res en une liste de mots.\nIci, on cherche l‚Äôindex du mot ‚Äúgoogle‚Äù pour r√©cup√©rer les mots suivants, qui correspondent √† la requ√™te de l‚Äôutilisateur.\n\nExemple :\n\nEntr√©e : \"cherche sur google c'est quoi la capitale de la France\"\n\nApr√®s split() : [\"cherche\",\"sur\", \"google\", \"c\", \"'\", \"est\", \"quoi\", \"la\", \"capitale\", \"de\", \"la\", \"France\"]\n\nIndex du mot ‚Äúgoogle‚Äù : 3\n\nCe qui est recherch√© : [\"c\", \"'\", \"est\", \"quoi\", \"la\", \"capitale\", \"de\", \"la\", \"France\"] ‚Üí Ici, on devrait prendre les mots apr√®s ‚Äúgoogle‚Äù.\n\n\n\n\n2Ô∏è‚É£ Pourquoi y a-t-il des + dans l‚ÄôURL de Google et YouTube ?\n\nwebbrowser.open(\"https://www.google.com/search?q=\" + \"+\".join(elt_rechercher), new=2)\n\n\nelif \"youtube\" in voix:\n    s = voix.replace(\"youtube\", \"\")\n    self.parler(\"D'accord sans soucis\")\n    pywhatkit.playonyt(s)\n\n\nExplication du +.\n\nDans une URL, un espace est souvent remplac√© par + ou %20.\n\nExemple : Si l‚Äôutilisateur dit ‚Äúrecherche machine learning sur google‚Äù, on doit transformer \"machine learning\" en \"machine+learning\" pour que Google comprenne.\n\nAutre solution : \"%20\".join(elt_rechercher) aurait aussi pu √™tre utilis√©.\n\n\n\n\n\nRecherches Avanc√©es avec Wolfram Alpha et Wikip√©dia\n\nUtilisation de Wolfram Alpha pour r√©pondre aux questions g√©n√©rales\n\n    def question_generale(self, voix):\n        voix = self.translate_eng_fr(voix)\n        try:\n            reponse = self.client.query(voix)\n            res = next(reponse.results).text\n            res = self.translate_fr_eng(res)\n            print(\"Un instant ...\")\n            print(res)\n            self.parler(res)\n        except:\n            self.parler(\"Je n'ai pas trouv√© de r√©ponse.\")\n\n¬†¬†¬†¬†¬†¬†Ici, l‚Äôassistant vocal envoie la requ√™te √† Wolfram Alpha, r√©cup√®re la r√©ponse et la traduit en fran√ßais avant de la prononcer.\nSi aucune r√©ponse n‚Äôest trouv√©e, une recherche est effectu√©e sur Wikip√©dia.\n\n\nUtilisation de wikipedia pour r√©pondre aux questions g√©n√©rales\n\ntry:\n    wikipedia.set_lang(\"fr\")\n    info = wikipedia.summary(voix, 1)\n    self.parler(str(info))\nexcept:\n    self.parler(\"Je n'ai pas bien compris\")\n\n\n\n3Ô∏è‚É£ query : √Ä quoi √ßa sert dans Wolfram Alpha*\n\nreponse = self.client.query(voix)\nres = next(reponse.results).text\n\n\n.query(voix) : envoie la question de l‚Äôutilisateur √† Wolfram Alpha.\n\nnext(reponse.results).text : r√©cup√®re la premi√®re r√©ponse retourn√©e et extrait le texte.\n\nSi Wolfram Alpha trouve une r√©ponse pertinente, elle est lue √† haute voix.\n\n\n\n\nR√©sum√© des concepts cl√©s :\n\n\n\n\n\n\n\n√âl√©ment\nExplication\n\n\n\n\nWolfram Alpha\nMoteur de calcul intelligent r√©pondant √† des requ√™tes scientifiques et analytiques\n\n\nsplit()\nD√©coupe une phrase en liste de mots\n\n\nquery()\nEnvoie une requ√™te √† Wolfram Alpha\n\n\njoin(‚Äú+‚Äù)\nTransforme une liste de mots en requ√™te lisible par un moteur de recherche"
  },
  {
    "objectID": "INFO-MINI-PROJETS/assistant-virtuel.html#conclusion",
    "href": "INFO-MINI-PROJETS/assistant-virtuel.html#conclusion",
    "title": "Djamaldbz - Cr√©e ton assistant virtuel en python !!!",
    "section": "Conclusion",
    "text": "Conclusion\nCe code met en place un assistant vocal capable de reconna√Ætre et d‚Äôex√©cuter des commandes vocales en fran√ßais, d‚Äôeffectuer des recherches sur le web, et de r√©pondre aux questions gr√¢ce √† Wolfram Alpha et Wikip√©dia. Il constitue une base quelque peu solide pour un assistant personnel plus ou moins intelligent.\nT√©l√©charger le fichier .qmd\nSi vous avez des questions, vous pouvez me contacter !!!\nRetour √† la page d‚Äôaccueuil"
  }
]